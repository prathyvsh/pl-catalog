* Programming Languages for Enthusiasts

[[./cover-art.png]]

A catalogue of languages, environments, and tooling around them. Feel free to send a PR if I am missing some cool indie projects here. If you find this catalog interesting, I am tweeting updates to this repo linking the work of the awesome developers behind these programming languages: https://twitter.com/prathyvsh/status/1353399062758891523

If you are an indie language author and would like to feature your language here, add the language in lexicographic order and send a PR. It would be great if you can link to your language’s logo, documentation page, and preferrably a playground where users can interact with the language before installing it locally.

* Languages

** [[https://arend-lang.github.io/][Arend]]

#+BEGIN_HTML

<img src="./img/arend.png" width="300px" />

#+END_HTML

Arend is a theorem prover based on its own take on Constructive Homotopy Type Theory (with an Interval Type) developed independently and in parallel to Cubical Type Theories. It natively supports higher inductive types, a version of cubical syntax and tight integration with IntelliJ IDEA IDE.

- Repo: https://github.com/JetBrains/Arend
- An official tutorial: https://arend-lang.github.io/documentation/tutorial
- And another tutorial from one of the (former) contributors: https://ice1000.org/2020/05-14-ArendLittleIntro.html

** [[https://www.assemblyscript.org/][AssemblyScript]]

#+BEGIN_HTML

<img src="https://avatars1.githubusercontent.com/u/28916798" width="100px" />

#+END_HTML

"A TypeScript-like language for WebAssembly."

AssemblyScript inherits basic TypeScript syntax but leaves out all of complex type features. On the other hand AssemblyScript type system is completely mandatory and strict (no Any or Unknown types) thus guiding compiler optimizations. Speaking of which, AssemblyScript employs [[http://webassembly.github.io/binaryen/][Binaryen]] as a compiler back-end implementing its own specific optimizations on top of it. In addition to that it features three options for a run-time system ranging from no run-time at all with completely manual memory management to an advanced GC that still supports manual triggering. Not mentioning hand-crafted standard library implementing state-of-the-art numerical and sorting algorithms. :)

** [[http://arturo-lang.io/][Arturo]]

Repo: https://github.com/arturo-lang/arturo
Simple, modern and powerful interpreted programming language for efficient scripting.

** [[https://www.beeflang.org/][Beef]]
[[https://raw.githubusercontent.com/beefytech/Beef/master/IDE/screenshot0.gif]]

A performance-oriented language designed to provide high level ergonomics suitable for game development.

** [[https://github.com/pepijndevos/bobcat][Bobcat]]
A concatenative language for behavior trees

** [[https://github.com/mukul-rathi/bolt][Bolt]]
Bolt is a language with in-built data-race freedom!


Accompanying dissertation is available [[https://github.com/mukul-rathi/bolt-dissertation][here]].

and the blog post on making it [[https://mukulrathi.netlify.app/create-your-own-programming-language/intro-to-compiler/][here]]

** [[https://github.com/boomerang-lang/boomerang][Boomerang]]

#+BEGIN_HTML

<img src="./img/boomerang.png" width="300px" />

#+END_HTML

Boomerang is a programming language for writing bidirectional transforms using lenses. It can be thought of as providing a setting for describing computations from left to right as functions mapping inputs to outputs and from right to left as describing a function that describes a modified output, together with the original input, back to a modified input.

Website: https://www.seas.upenn.edu/~harmony/

** [[https://caramel.run][Caramel]]

A functional language for building type-safe, scalable, and maintainable applications.
Uses the OCaml compiler and targets the Erlang VM.

** [[https://github.com/CatalaLang/catala][Catala]]
Catala is a programming language adapted for socio-fiscal legislative literate programming. By annotating each line of the legislative text with its meaning in terms of code, one can derive an implementation of complex socio-fiscal mechanisms that enjoys a high level of assurance regarding the code-law faithfulness.

[[Catala Logo][https://raw.githubusercontent.com/CatalaLang/catala/master/doc/images/logo.png]]

[[Catala Screenshot][https://raw.githubusercontent.com/CatalaLang/catala/master/doc/images/ScreenShotVSCode.png]]

Website: https://catala-lang.org/

** [[https://github.com/coalton-lang/coalton][Coalton]]

[[https://raw.githubusercontent.com/coalton-lang/coalton/main/docs/assets/coalton-logotype-gray.svg]]

Coalton is an efficient, statically typed functional programming language that supercharges Common Lisp.


** [[https://github.com/dafny-lang/dafny][Dafny]]
Dafny is a programming language with a program verifier. As you type in your program, the verifier constantly looks over your shoulders and flags any errors.

** [[https://github.com/darklang/][Dark]]

[[./img/darklang.gif]]

Dark, a combined language, editor, and infrastructure to make it easy to build backends.

Website: https://darklang.com/
Dev Blog: https://blog.darklang.com/

** [[https://github.com/google-research/dex-lang][Dex Lang]]
Research language for array processing in the Haskell/ML family

** [[https://github.com/ditto/ditto][Ditto]]
A Super Kawaii Dependently Typed Programming Language


** [[https://github.com/egison/egison][Egison]]
Egison is a functional programming language featuring its expressive pattern-matching facility.

** [[https://www.empirical-soft.com][Empirical]]

Empirical is a language for time-series analysis. It has statically typed Dataframes that can infer type from an external source at compile time.

** [[https://github.com/enso-org/][Enso]]

[[./img/enso.gif]]

A hybrid visual and textual functional programming language.

They keep a dev diary on Medium: https://medium.com/@enso_org/enso-dev-blog-18th-december-2020-e51e11c02c66

** [[https://github.com/felix-lang/felix][Felix]]
An advanced, statically typed, high performance scripting language with native C++ embedding.

** [[https://github.com/robrix/facet][Facet]]
A call-by-value functional language with algebraic effects, runners, quantitative type theory, and staging

** [[https://github.com/chaosprint/glicol][Glicol]]

[[https://raw.githubusercontent.com/chaosprint/glicol/main/logo.png]]

A graph-oriented live coding language written in Rust.

Website: https://glicol.org

** [[https://github.com/ffwff/hana][Hana]]
A small dynamically-typed scripting language written in Rust/C and is inspired by Pascal, Ruby and Javascript.

** [[https://github.com/imba/imba][Imba]]
[[https://github.com/imba/branding-imba/raw/555b21940fa796fbf0eed44df48160d450ca894b/mascot/mascot-full-yellow.png]]

Imba is a friendly full-stack programming language for the web that compiles to performant JavaScript. It has language-level support for defining, extending, subclassing, instantiating and rendering DOM nodes.

Website: [[https://imba.io/]]

** [[https://github.com/jamii/imp][Imp]]
Relational Programming Environment.

Imp by Jamie Brandon is envisioned to be a programming environment for working with structured data across multiple platforms blurring the lines between a programming language and a database.

It is still in an experimental phase, but already home to a few cool ideas. Read about it here: https://scattered-thoughts.net/writing/imp-intro/

** [[https://dotink.co/docs/overview/][Ink]]
Ink is a minimal programming language inspired by modern JavaScript and Go, with functional style.

Repo: https://github.com/thesephist/ink

** [[https://github.com/samrushing/irken-compiler][Irken]]
Irken is a strongly typed, compiled language with a lisp-like syntax extensible with macros.
It uses type inference along with a powerful type system to give you the speed of a compiled language with high-level data types and a higher degree of safety than languages like C/C++.

** [[https://ngs-lang.org/][Next Generation Shell]]

NGS is a programming language designed specifically for DevOps. It's a fully fledged programming language with facilities for typical shell scripting: running external programs (including handling of exit codes), data manipulation, retry, etc.

Repo: https://github.com/ngs-lang/ngs

#+BEGIN_HTML

<img src="https://ngs-lang.org/ngs-logo-300.png" />

#+END_HTML

** [[https://scopes.js.org/][Scopes]]
The Scopes programming language takes the saying "Objects are a poor man's closures" (and its reverse, "Closures are a poor man's objects") seriously.

** [[https://github.com/dmadisetti/sona.js][sona]]
The sona programming language is a 14 token language with a ~ minimal (1000 character) interpreter. It is based on and in the minimal (140 words) natural constructed language [[https://tokipona.org][toki pona]] created by Sonja Lang. The design inspiration comes from assembly for simplicity. A sona playground is availible on [[https://observablehq.com/@dmadisetti/sona][Observable]].
#+BEGIN_HTML

<img src="./img/sona.png" width="400px" />

#+END_HTML

** [[https://github.com/souffle-lang/souffle][Souffle]]
Soufflé is a variant of Datalog for tool designers crafting analyses in Horn clauses. Soufflé synthesizes a native parallel C++ program from a logic specification.

** [[https://github.com/vtereshkov/umka-lang][Umka]]
Umka is a statically typed embeddable scripting language. It combines the simplicity and flexibility needed for scripting with a compile-time protection against type errors. Its aim is to follow the Python Zen principle /Explicit is better than implicit/ more consistently than dynamically typed languages generally do.

#+BEGIN_HTML

<img src="./img/umka.png" width="800px" />

#+END_HTML

** [[https://github.com/urweb/urweb][Ur/Web]]
Ur is a programming language in the tradition of ML and Haskell, but featuring a significantly richer type system. Ur is functional, pure, statically typed, and strict. Ur supports a powerful kind of metaprogramming based on row types.


** [[https://github.com/elves/elvish][Elvish]]
Friendly Interactive Shell and Expressive Programming Language

** [[https://github.com/catseye/Mascarpone][Mascarpone]]
Mascarpone is a self-modifying programming language in the style of Emmental.

** [[https://github.com/pikelet-lang/pikelet/][Pikelet]]
[[Pikelet Logo][https://raw.githubusercontent.com/pikelet-lang/pikelet/main/book/assets/pikelet.png]]

A friendly little systems language with first-class types.

Some of Brendan’s thoughts on evolving Pikelet can be read here:
https://gist.github.com/brendanzab/eba7015e6345abe79a57a704091820bb/

** [[https://github.com/teyjus/teyjus][Teyjus]]
An efficient implementation of the higher-order logic programming language Lambda Prolog

** [[https://github.com/opencypher/][Open Cypher]]
A declarative property graph query language

** [[https://github.com/ballesta25/Morpheus][Morpheus]]
A stack-based programming language with derivational morphemes

** [[https://github.com/hamler-lang/][Hamler]]

#+BEGIN_HTML
<img src="https://camo.githubusercontent.com/174524f57c5ba4439286566213264242a6e4c9869cc8f8ddfd6027f585be3e3f/68747470733a2f2f7777772e68616d6c65722d6c616e672e6f72672f696d616765732f68616d6c65724032782e706e67" />

#+END_HTML

Haskell-style functional programming language running on Erlang VM

** [[http://objective.st/][Objective-S]]

#+BEGIN_HTML

<img src="http://objective.st/objst.png" width=50px />

#+END_HTML

Objective-S is an architecture-oriented programming language inspired by Smalltalk, Objective-C, the UNIX shell
and the web.

** [[https://github.com/orion-lang/orion/][Orion]]

#+BEGIN_HTML

<img src="https://raw.githubusercontent.com/orion-lang/orion/master/assets/orion-logo.png" width=100px />

#+END_HTML

Orion is a high level, purely functional programming language with a LISP based syntax

** [[https://loda-lang.org/][Loda]]

#+BEGIN_HTML

<img src="./img/loda-logo.png" width="100px" />

#+END_HTML

#+BEGIN_HTML

<img src="https://raw.githubusercontent.com/loda-lang/loda-lang.github.io/master/loda-editor.png" />

#+END_HTML

LODA is an assembly language, a computational model and a distributed tool for mining integer sequences.


Repo: https://github.com/loda-lang

** [[https://lys-lang.dev][Lys]]

#+BEGIN_HTML

<img src="https://user-images.githubusercontent.com/260114/54724904-c7e7d300-4b4b-11e9-8bbd-ec3f9044c86e.png" width="100px" />

#+END_HTML

** [[https://github.com/batman-nair/IRCIS][IRCIS]]

[[Logo of IRCIS][https://raw.githubusercontent.com/batman-nair/IRCIS/master/screencaps/banner.png]]

[[https://raw.githubusercontent.com/batman-nair/IRCIS/master/screencaps/factors.gif]]

IRCIS is an esoteric programming language where the program exists in a two-dimensional grid of cells, where each cell contains a single instruction, and execution can proceed in any cardinal direction across this grid -- not just left-to-right, but also right-to-left, top-to-bottom, and bottom-to-top.

** [[https://github.com/wasp-lang/wasp][Wasp]]

[[./img/wasp.png]]

Wasp (Web Application Specification Language) is a declarative DSL (domain-specific language) for developing, building and deploying modern full-stack web apps with less code.

Website: https://wasp-lang.dev/

** [[https://github.com/jckarter/clay][Clay]]
Clay is a programming language designed for Generic Programming.

** [[https://github.com/jameshaydon/lawvere][Lawvere]]
A categorical programming language with effects

** [[https://github.com/alantech/alan][Alan]]
Alan is a programming language that does concurrency for you and can thus separate how the software is written from how it runs

** [[https://github.com/ponylang/ponyc][Pony]]

[[Pony Logo][https://www.ponylang.io/images/logo.png]]

Pony is an open-source, actor-model, capabilities-secure, high performance programming language.

A post on the history of the language: https://www.ponylang.io/blog/2017/05/an-early-history-of-pony/

A collection of talks on the language is available here: https://codesync.global/media/top-10-pony-lang-talks/

** [[https://wiki.xxiivv.com/site/lain.html][Lain]]

[[./img/lain.png]]

Lain is a Lisp based templating and scripting language used at Devin Lin Luvega’s website XXIIVV

An image editor called Ronin is also based on the same language: https://100r.co/site/ronin.html

** [[https://github.com/jcubic/lips][Lips]]
Scheme based powerful lisp language in JavaScript

** [[https://futhark-lang.org][Futhark]]

A high-performance data-parallel functional programming language targeting CUDA and OpenCL. Features limited dependent types to track array dimentions, uniquness typing for local in-place mutation and a Standard ML-style module system with parametric modules. The compiler is implemented in Haskell.

GitHub repository: https://github.com/diku-dk/futhark

** [[https://github.com/slerpyyy/paste-lang][Paste Lang]]
[WIP] An esoteric programming language build around macros.

** [[https://github.com/frank-lang/frank][Frank]]
Frank is a strict, effectful functional programming language with a bidirectional type-and-effect system and effect handlers

** [[http://www.attoparsec.com/artifacts/gottlob/index.html][Gottlob]]
[[http://www.attoparsec.com/artifacts/gottlob/images/functions.png]]

Gottlob is an esoteric language which tries to match Frege's notation in [[https://en.wikipedia.org/wiki/Begriffsschrift][Begriffsschrift]] as closely as possible.

** [[https://github.com/koka-lang/koka][Koka]]

#+BEGIN_HTML
<img width="150px" src="https://koka-lang.github.io/koka/doc/images/koka-logo-filled.png" />
<br />
<img width="300px" src="https://raw.githubusercontent.com/koka-lang/koka/master/doc/snippet-yield.png" />
#+END_HTML

Koka: a function-oriented language with effect inference

I encountered Koka when researching about algebraic effects. Papers from Daan Leijen on its semantics and technical details are available here: https://www.microsoft.com/en-us/research/project/koka/

** [[https://github.com/red/red][Red]]
Red is a new programming language strongly inspired by Rebol, but with a broader field of usage thanks to its native-code compiler, from system programming to high-level scripting, while providing modern support for concurrency and multi-core CPUs.

** [[https://github.com/moonad/FormCoreJS][FormCoreJS]]
A minimal pure functional language based on self dependent types.

** [[https://github.com/granule-project/gerty][Gerty]]
A minimal, dependently-typed programming language

** [[https://github.com/marcobambini/gravity][Gravity]]
Gravity is a powerful, dynamically typed, lightweight, embeddable programming language written in C without any external dependencies (except for stdlib). It is a class-based concurrent scripting language with modern Swift-like syntax.

** [[https://github.com/ballerina-platform/ballerina-lang][Ballerina]]
Ballerina is an open source programming language and platform for cloud-era application programmers to easily write software that just works.

** [[https://github.com/gluon-lang/gluon][Gluon]]
A static, type inferred and embeddable language written in Rust.

** [[https://github.com/flix/flix][Flix]]

[[https://raw.githubusercontent.com/flix/flix/master/docs/logo.png]]

Flix is a principled poly-paradigm language with polymorphic effect system and first class datalog constraints.

Website: https://flix.dev

** [[https://github.com/gleam-lang/gleam][Gleam]]
A statically typed language for the Erlang VM

** [[https://github.com/astrolang/astro][Astro]]
A fun safe language for rapid prototyping and high performance applications

** [[https://github.com/wyvernlang/wyvern][Wyvern]]
Wyvern is a new general-purpose programming language designed to support adaptation and assurance.

** [[https://github.com/slovnicki/pLam][pLam]]
An interpreter for learning and exploring pure λ-calculus

** [[https://github.com/topshell-language/topshell][TopShell]]
Purely functional, reactive scripting language

** [[https://github.com/FStarLang/FStar][FStar]]
Verification system for effectful programs

** [[https://github.com/jeffreyguenther/shiro][Shiro]]
Author: Jeffrey Guenther

A declarative, dataflow programming language for exploring alternatives

Thesis: http://summit.sfu.ca/system/files/iritems1/17048/etd9968_JGuenther.pdf

** [[https://github.com/agda/agda][Agda]]
Agda is a dependently typed programming language / interactive theorem prover.

** [[https://github.com/polyml/polyml][PolyML]]
The Poly/ML implementation of Standard ML.

** [[https://github.com/factor/factor][Factor]]

#+BEGIN_HTML
<img width="150px" src="https://factorcode.org/logo.png" />
<img width="300px" src="https://factorcode.org/factor-macosx.png" />
#+END_HTML

Factor is a concatenative, stack-based programming language with high-level features including dynamic types, extensible syntax, macros, and garbage collection. On a practical side, Factor has a full-featured library, supports many different platforms, and has been extensively documented.

** [[https://github.com/evincarofautumn/kitten][Kitten]]

[[http://kittenlang.org/logo.png]]

[[./img/kitten.png]]

A statically typed concatenative systems programming language.

** [[https://github.com/CakeML/cakeml][CakeML]]
A Verified Implementation of ML

** [[https://github.com/zeroflag/punyforth][PunyForth]]

#+BEGIN_HTML
<img width="300px" src="https://raw.githubusercontent.com/zeroflag/punyforth/master/screenshot/helloworld.png" />
#+END_HTML

A simple, stack-based, Forth inspired programming language that primarily targets Internet of Things (IOT) devices, like the ESP8266.

** [[https://www.play-lang.dev/][Play]]
A small, portable language, for making reliable applications

** [[https://github.com/cedille/cedille][Cedille]]
Cedille, a dependently typed programming languages based on the Calculus of Dependent Lambda Eliminations

** [[https://github.com/rntz/datafun][DataFun]]
Research on integrating datalog & lambda calculus via monotonicity types.

Paper on the underlying theory: http://www.rntz.net/files/tones.pdf

** [[https://github.com/jondgoodwin/cone][Cone]]
Cone is a fast, fit, friendly, and safe systems programming language.

** [[https://github.com/zesterer/atto][Atto]]
An insanely simple self-hosted functional programming language

** [[https://github.com/less-wrong/less-wrong][Less Wrong]]
Simple CoC-based programming language

** [[https://github.com/wu-lang/wu][Wu]]
An expression oriented, gradually typed and mission-critical programming language.

** [[https://github.com/c3d/xl][XL]]
A super-flexible language based entirely on tree rewrites

** [[https://github.com/chessai/theseus][Theseus]]
Functional programming language with fully reversible computation



** [[https://github.com/finkel-lang/finkel][Finkel]]
Finkel is a statically typed, purely functional, non-strict-by-default dialect of the Lisp programming language. Or in other words, Haskell in S-expression.

** [[https://github.com/PlasmaLang/plasma][Plasma]]
A statically typed, side-effect free single assignment language and will have functional programming and concurrent programming features.

** [[https://github.com/adam-mcdaniel/oakc][Oakc]]
A portable programming language with an compact intermediate representation

** [[https://github.com/unisonweb/unison][Unison]]
Unison is a modern, statically-typed purely functional language, similar to Haskell, but with the ability to describe entire distributed systems with a single program.

** [[https://github.com/supercollider/supercollider][SuperCollider]]
An audio server, programming language, and IDE for sound synthesis and algorithmic composition.

** [[https://github.com/mila-iqia/myia][Myia]]
Myia is a new differentiable programming language. It aims to support large scale high performance computations (e.g. linear algebra) and their gradients.

** [[https://f1zz.org/][Fizz]]
fizz is an experimental language and runtime environment for the exploration of cognitive architectures and combined Machine Learning (ML) and Machine Reasoning (MR) solutions.

** [[https://github.com/vrtbl/passerine/][Passerine]]

#+BEGIN_HTML

<img src="https://raw.githubusercontent.com/vrtbl/passerine/master/Logotype.svg" width=500px />

#+END_HTML

Passerine is a small extensible programming language designed for concise expression with little code. Passerine has roots in Scheme and ML-flavored languages: at its core, it's lambda-calculus with pattern-matching, structural ADTs, effect-based concurrency, and syntactic extension. The goal of Passerine is to create a tiny language core that can be extended in a composable manner, for use as a functional scripting language embeddable in other applications. Currently in early stages of development, Passerine has a 3 compilers at varying stages of completeness: one written in Rust, another D, and one in Passerine itself. It can target Wasm, its own compact bytecode format, D-lang, JS, and native code, among other formats.

** [[https://github.com/ghewgill/neon-lang][Neon]]
The primary goal of Neon is to find out whether a useful programming language can avoid some of the common pitfalls that beginners frequently encounter in other languages.

** [[https://github.com/RockstarLang/rockstar][Rockstar]]
Rockstar is a dynamically typed computer programming language,
designed for creating programs that are also song lyrics. Rockstar is
heavily influenced by the lyrical conventions of 1980s hard rock and
power ballads.

** [[https://vlang.io/][V]]
Simple, fast, safe, compiled. For developing maintainable software.

** [[https://github.com/xyproto/battlestar][Battlestar]]
Battlestar provides a different syntax for programming in Assembly, with support for inline C. The goal is to let users create tiny executables and possibly write 4k and 64k demoscene demos. It's written for fun and for the educational process. 64-bit x86 Linux, 32-bit x86 Linux and 16-bit x86 DOS are supported.

** [[https://mlochbaum.github.io/BQN/][BQN]]
An APL-like language that tries to put APL on a firmer footing.

#+BEGIN_HTML
<details>
<summary><strong>Tooling</strong></summary>
#+END_HTML

** [[https://github.com/nanocaml/nanocaml][NanoCaml]]

** [[https://github.com/RobertHarper/TILT-Compiler][TILT]]
TILT is a compiler for Standard ML that uses Typed Intermediate
Languages.

** [[https://github.com/mfranzs/typer-piper][Typer Piper]]
The Typer Piper: Automating Data Structure Transformations Through Type Chaining

** [[https://github.com/vriad/zod][Zod]]
Zod is a TypeScript-first schema declaration and validation library. I'm using the term "schema" to broadly refer to any data type/structure, from a simple string to a complex nested object.

** [[https://github.com/Matechs-Garage/matechs-effect][Matechs Effect]]
A Fully-fledged functional effect system for typescript with a rich standard library.

** [[https://github.com/dorchard/effects-as-sessions][Effects as Session]]
Formalised embedding of an imperative language with effect system into session-typed pi calculus.

** [[https://github.com/goldfirere/singletons][Singletons]]
Fake dependent types in Haskell using singletons

** [[https://github.com/robotlolita/tamago][Tamago]]
A safe, extensible, layered programming language that runs on top of JavaScript

** [[https://github.com/tweag/asterius][Asterius]]
Asterius is a Haskell to WebAssembly compiler based on GHC.

** Compilations

*** [[https://github.com/dundalek/awesome-lisp-languages][Awesome Lisp Languages]]
Catalog of Lisp languages

*** [[https://github.com/yairchu/list-of-structural-editors][List of structural editors]]


#+BEGIN_HTML </details> #+END_HTML
